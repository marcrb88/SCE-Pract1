"use strict";

exports.__esModule = true;
exports.isFundingRemembered = isFundingRemembered;
exports.rememberFunding = rememberFunding;
exports.rememberFundingIframe = rememberFundingIframe;
var _sdkClient = require("@paypal/sdk-client");
var _sdkConstants = require("@paypal/sdk-constants");
var _constants = require("./constants");
var _cookie = require("./cookie");
var _util = require("./util");
var _config = require("./config");
const getDefaultIsFundingRememberedOptions = () => {
  return {};
};
function isFundingRemembered(req, fundingSource, opts = getDefaultIsFundingRememberedOptions()) {
  const cookies = opts.cookies || req.cookies || {};
  const cookieSettings = _config.COOKIE_SETTINGS[fundingSource] || {};
  if (cookieSettings.legacyRead && cookieSettings.legacyKey && cookies[cookieSettings.legacyKey]) {
    return true;
  }
  const sdkCookie = (0, _cookie.getSDKCookie)(req, cookies);
  const funding = sdkCookie.funding || {};
  const fundingConfig = funding[fundingSource] || {};
  if (fundingConfig.expiry && fundingConfig.expiry < (0, _util.getTimestamp)()) {
    return false;
  }
  return Boolean(fundingConfig.remembered);
}
function rememberFunding(req, res, fundingSources, opts = {}) {
  const {
    expiry
  } = opts;
  const sdkCookie = (0, _cookie.getSDKCookie)(req);
  const funding = sdkCookie.funding = sdkCookie.funding || {};
  for (const fundingSource of fundingSources) {
    const fundingConfig = funding[fundingSource] = sdkCookie.funding[fundingSource] || {};
    fundingConfig.remembered = true;
    const cookieSettings = _config.COOKIE_SETTINGS[fundingSource] || {};
    if (cookieSettings.legacyWrite && cookieSettings.legacyKey) {
      res.cookie(cookieSettings.legacyKey, '1');
    }
    if (expiry) {
      fundingConfig.expiry = (0, _util.getTimestamp)() + expiry;
    }
  }
  (0, _cookie.writeSDKCookie)(res, sdkCookie);
}
function parseFundingSources(commaSeparatedFundingSources) {
  return commaSeparatedFundingSources.split(',');
}
function setSecurityHeaders(req, res, {
  nonce,
  domain
}) {
  const cspHeader = (0, _util.isIE)(req) ? _constants.HTTP_RESPONSE_HEADER.X_CONTENT_SECURITY_POLICY : _constants.HTTP_RESPONSE_HEADER.CONTENT_SECURITY_POLICY;
  res.setHeader(cspHeader, (0, _util.buildCSP)({
    'script-src': `'self' https://*.paypal.com:* 'nonce-${nonce}'`,
    'connect-src': `'self' https://*.paypal.com:*`,
    'frame-ancestors': `${domain}`,
    'img-src': `data:`,
    'style-src': `'none'`,
    'frame-src': `'none'`,
    'font-src': `'none'`,
    'object-src': `'none'`,
    'media-src': `'none'`
  }));
  res.setHeader(_constants.HTTP_RESPONSE_HEADER.ACCESS_CONTROL_ALLOW_ORIGIN, domain);
}
function rememberFundingIframe({
  allowedClients = {}
}) {
  return (req, res) => {
    const {
      [_constants.QUERY_PARAM.DOMAIN]: domain,
      [_constants.QUERY_PARAM.FUNDING_SOURCES]: commaSeparatedFundingSources,
      [_constants.QUERY_PARAM.SDK_META]: sdkMeta,
      [_constants.QUERY_PARAM.CLIENT_ID]: clientID,
      [_constants.QUERY_PARAM.EXPIRY]: expiryTime
    } = (0, _util.getQuery)(req);
    if (!commaSeparatedFundingSources) {
      return res.status(400).send(`Expected ${_constants.QUERY_PARAM.FUNDING_SOURCES} query param`);
    }
    if (!sdkMeta) {
      return res.status(400).send(`Expected ${_constants.QUERY_PARAM.SDK_META} query param`);
    }
    if (!clientID) {
      return res.status(400).send(`Expected ${_constants.QUERY_PARAM.CLIENT_ID} query param`);
    }
    if (!domain || !domain.match(/^https?:\/\/[a-zA-Z_0-9.-]+$/)) {
      return res.status(400).send(`Expected ${_constants.QUERY_PARAM.DOMAIN} query param`);
    }
    if (expiryTime && !expiryTime.match(/^\d+$/)) {
      return res.status(400).send(`Expected ${_constants.QUERY_PARAM.EXPIRY} query param to be a number`);
    }
    let expiry;
    if (expiryTime) {
      expiry = parseInt(expiryTime, 10);
    }
    const clientConfig = allowedClients[clientID];
    if (!clientConfig) {
      return res.status(400).send(`Invalid client id`);
    }
    const {
      allowedFunding,
      allowedDomains
    } = clientConfig;
    const fundingSources = parseFundingSources(commaSeparatedFundingSources);
    const validFunding = Object.values(_sdkConstants.FUNDING);
    for (const fundingSource of fundingSources) {
      if (validFunding.indexOf(fundingSource) === -1) {
        return res.status(400).send(`Invalid funding source`);
      }
      if (allowedFunding.indexOf(fundingSource) === -1) {
        return res.status(400).send(`Funding source not allowed for client`);
      }
    }
    if (allowedDomains.indexOf(domain) === -1) {
      return res.status(400).send(`Domain not allowed for client`);
    }
    let meta;
    try {
      meta = (0, _sdkClient.unpackSDKMeta)(req.query.sdkMeta);
    } catch (err) {
      return res.status(400).send(`Invalid sdk meta`);
    }
    rememberFunding(req, res, fundingSources, {
      expiry
    });
    const nonce = (0, _util.getNonce)();
    const {
      getSDKLoader
    } = meta;
    setSecurityHeaders(req, res, {
      domain,
      nonce
    });
    res.status(200).send(`
            <!DOCTYPE html>
            <head>
                <link rel="icon" href="data:;base64,=">
                ${getSDKLoader({
      nonce
    })}
                <script nonce="${nonce}">
                    paypal.rememberFunding(${(0, _util.safeJSON)(fundingSources)}, ${(0, _util.safeJSON)({
      expiry
    })});
                </script>
            </head>
        `);
  };
}